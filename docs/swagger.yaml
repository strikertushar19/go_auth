basePath: /api/v1
definitions:
  models.AuthInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      password:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in an existing user and returns a JWT token
      parameters:
      - description: User Login Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.AuthInput'
      produces:
      - application/json
      responses:
        "200":
          description: 'token": "JWT Token'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error": "Bad Request'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Login
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user
      parameters:
      - description: User Signup Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.AuthInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 'error": "Bad Request'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create User
      tags:
      - Auth
  /user/profile:
    get:
      description: Returns the current user's profile
      produces:
      - application/json
      responses:
        "200":
          description: 'user": "Current User Data'
          schema:
            additionalProperties: true
            type: object
      summary: Get User Profile
      tags:
      - Auth
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
